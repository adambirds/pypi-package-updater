name: Test, Lint, and Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  create:
    tags:
      - v*
  release:
    types:
      - published

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          - '3.11'
          - '3.12'
          - '3.13'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=pypi_updater --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        
    - name: Run linting and formatting checks
      run: |
        python scripts/lint.py

  build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name != 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Clean up previous build artifacts
      run: |
        rm -rf dist/ build/ *.egg-info
        
    - name: Build package
      run: |
        python -m build --sdist --wheel --outdir dist/
        
    - name: Check distribution
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-artifacts
        path: dist/

  publish-test:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-artifacts
        path: dist/
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Convert CHANGELOG.md to Debian changelog
      if: github.ref_type != 'tag'
      run: |
        pwd
        ls -la .
        python3 scripts/changelog_to_debian.py
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add packaging/debian/changelog
        git commit -m "ci: update debian changelog from CHANGELOG.md" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}

    - name: Build Debian Package (Test)
      run: |
        sudo apt-get update
        sudo apt-get install -y devscripts build-essential dh-python debhelper-compat python3-all python3-aiohttp python3-setuptools-scm python3-wheel python3-build
        # For test builds, build directly from repo to preserve git info for setuptools_scm
        # This ensures development versions (like 0.2.15.dev1+abc123) are used
        cp -r packaging/debian .
        
        # Inject the setuptools_scm version into the changelog for proper .deb naming
        python3 scripts/inject_dynamic_version.py
        echo "Updated changelog with dynamic version:"
        head -3 debian/changelog
        
        dpkg-buildpackage -us -uc

    - name: Upload Debian Package to APT Repository (Testing)
      run: |
        # Find the actual .deb file created by dpkg-buildpackage
        DEB_FILE=$(find . -maxdepth 2 -name "pypi-package-updater*.deb" | head -1)
        if [ -n "$DEB_FILE" ]; then
          echo "Found Debian package: $DEB_FILE"
          
          # Download upload script
          curl -O https://raw.githubusercontent.com/AdamBirds/adb-apt-repo/main/scripts/upload-to-apt-repo.sh
          chmod +x upload-to-apt-repo.sh
          
          # Upload to testing distribution
          ./upload-to-apt-repo.sh "$DEB_FILE" testing main
        else
          echo "No .deb file found"
          echo "Available .deb files:"
          find . -name "*.deb" -ls
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.APT_REPO_TOKEN }}

    - name: Build Snap Package (Test)
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo systemctl start snapd
        sudo systemctl enable snapd
        sudo snap wait system seed.loaded
        sudo snap install core24
        sudo snap install snapcraft --classic
        snapcraft --destructive-mode

  publish-pypi:
    name: Publish to PyPI and Package Managers
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
        fetch-tags: true
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm
        
    - name: Debug git and version state
      run: |
        echo "Git ref: ${{ github.ref }}"
        echo "Git ref type: ${{ github.ref_type }}"
        echo "Git ref name: ${{ github.ref_name }}"
        echo "Git SHA: ${{ github.sha }}"
        git log --oneline -3
        git tag --points-at HEAD
        python3 -c "import setuptools_scm; print('setuptools_scm version:', setuptools_scm.get_version())"
        
    - name: Clean up previous build artifacts
      run: |
        rm -rf dist/ build/ *.egg-info
        
    - name: Build package fresh from tag
      run: |
        python -m build --sdist --wheel --outdir dist/
        
    - name: Check distribution
      run: |
        python -m twine check dist/*
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    
    - name: Convert CHANGELOG.md to Debian changelog
      if: github.ref_type != 'tag'
      run: |
        python3 scripts/changelog_to_debian.py
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add packaging/debian/changelog
        git commit -m "ci: update debian changelog from CHANGELOG.md" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
        
    - name: Build Debian Package
      run: |
        sudo apt-get update
        sudo apt-get install -y devscripts build-essential dh-python debhelper-compat python3-all python3-aiohttp python3-setuptools-scm python3-wheel python3-build
        # For consistency, build directly from repo (setuptools_scm will use the tag version for releases)
        cp -r packaging/debian .
        
        # Inject the setuptools_scm version into the changelog for proper .deb naming
        python3 scripts/inject_dynamic_version.py
        echo "Updated changelog with dynamic version:"
        head -3 debian/changelog
        
        dpkg-buildpackage -us -uc

    - name: Upload Debian Package to APT Repository (Stable)
      run: |
        # Find the actual .deb file created by dpkg-buildpackage
        DEB_FILE=$(find . -maxdepth 2 -name "pypi-package-updater*.deb" | head -1)
        if [ -n "$DEB_FILE" ]; then
          echo "Found Debian package: $DEB_FILE"
          
          # Download upload script
          curl -O https://raw.githubusercontent.com/AdamBirds/adb-apt-repo/main/scripts/upload-to-apt-repo.sh
          chmod +x upload-to-apt-repo.sh
          
          # Upload to stable distribution for releases
          ./upload-to-apt-repo.sh "$DEB_FILE" stable main
        else
          echo "No .deb file found"
          echo "Available .deb files:"
          find . -name "*.deb" -ls
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.APT_REPO_TOKEN }}

    - name: Build Snap package with dynamic version
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo systemctl start snapd
        sudo systemctl enable snapd
        sudo snap wait system seed.loaded
        sudo snap install core24
        sudo snap install snapcraft --classic
        snapcraft --destructive-mode

    - name: Upload Snap to Snap Store
      uses: snapcore/action-publish@v1
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
      with:
        snap: '*.snap'
        release: stable

    - name: Upload Debian Package
      run: |
        # Find the actual .deb file created by dpkg-buildpackage
        # Look specifically for files matching our package name pattern
        DEB_FILE=$(find . -maxdepth 2 -name "pypi-package-updater*.deb" | head -1)
        if [ -n "$DEB_FILE" ]; then
          echo "Found Debian package: $DEB_FILE"
          # Use GitHub CLI to upload the asset
          gh release upload ${{ github.event.release.tag_name }} "$DEB_FILE" --clobber
        else
          echo "No .deb file found"
          echo "Available .deb files:"
          find . -name "*.deb" -ls
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Snap Package
      run: |
        # Find the actual .snap file created
        SNAP_FILE=$(find . -name "*.snap" | head -1)
        if [ -n "$SNAP_FILE" ]; then
          echo "Found Snap package: $SNAP_FILE"
          # Use GitHub CLI to upload the asset
          gh release upload ${{ github.event.release.tag_name }} "$SNAP_FILE" --clobber
        else
          echo "No .snap file found"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Python Wheel
      run: |
        # Find the actual .whl file created
        WHL_FILE=$(find dist/ -name "*.whl" | head -1)
        if [ -n "$WHL_FILE" ]; then
          echo "Found Python wheel: $WHL_FILE"
          # Use GitHub CLI to upload the asset
          gh release upload ${{ github.event.release.tag_name }} "$WHL_FILE" --clobber
        else
          echo "No .whl file found"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Python Source Distribution
      run: |
        # Find the actual .tar.gz file created
        SDIST_FILE=$(find dist/ -name "*.tar.gz" | head -1)
        if [ -n "$SDIST_FILE" ]; then
          echo "Found Python sdist: $SDIST_FILE"
          # Use GitHub CLI to upload the asset
          gh release upload ${{ github.event.release.tag_name }} "$SDIST_FILE" --clobber
        else
          echo "No .tar.gz file found"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
